{"version":3,"sources":["paginationFilter.js"],"names":["window","paginate","_lignePaginate","init","el","options","numberPerPage","goBar","pageCounter","filter","setTableEl","initTable","getEl","checkIsTableNull","setOptions","setConstNumberPerPage","setFilterOptions","launchPaginate","settings","table","constNumberPerPage","numberOfPages","hasPagination","filterSettings","filterBox","trs","number","setNumberPerPage","indexOf","document","getElementById","replace","trim","querySelector","filterOptions","setFilterEl","checkIsFilterBoxNull","setFunctionInFilterBox","setAttribute","getTable","getNumberPerPage","getConstNumberPerPage","pageCount","th","tr","value","setPageCounter","Error","removePaginate","element","parentNode","removeChild","paginationMoreThatTenPage","iterator","numberOfPage","middleValue","goToPage","page","sort","paginateAlreadyExists","$i","$ii","rowCount","rows","length","hasHead","firstElementChild","tagName","$j","outerHTML","Math","ceil","insertAdjacentHTML","selectedPageNumber","startPoint","innerHTML","currentPage","nextDisabled","buttons","pageButtons","classList","add","style","display","visibility","toUpperCase","querySelectorAll","forEach","children","find","td","includes","lignePaginate"],"mappings":"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","file":"paginationFilter.js","sourcesContent":["(function (window) {\r\n    'use strict';\r\n\r\n    function lignePaginate() {\r\n        var _lignePaginate = {};\r\n\r\n        _lignePaginate.init = function (el, options = { numberPerPage: 10, goBar: false, pageCounter: true }, filter = [{ el: null }]\r\n        ) {\r\n            setTableEl(el);\r\n            initTable(_lignePaginate.getEl());\r\n            checkIsTableNull();\r\n            setOptions(options);\r\n            setConstNumberPerPage(options.numberPerPage);\r\n            setFilterOptions(filter);\r\n            launchPaginate();\r\n        }\r\n\r\n        var settings = {\r\n            el: null,\r\n            table: null,\r\n            numberPerPage: 10,\r\n            constNumberPerPage: 10,\r\n            numberOfPages: 0,\r\n            goBar: false,\r\n            pageCounter: true,\r\n            hasPagination: true,\r\n        };\r\n\r\n        var filterSettings = {\r\n            el: null,\r\n            filterBox: null,\r\n            trs: null,\r\n        }\r\n\r\n        var setConstNumberPerPage = function (number) {\r\n            settings.constNumberPerPage = number;\r\n        }\r\n        var setNumberPerPage = function (number) {\r\n            settings.numberPerPage = number;\r\n        }\r\n\r\n        var initTable = function (el) {\r\n            if (el.indexOf('#') > -1) {\r\n                settings.table = document.getElementById(el.replace('#', '').trim());\r\n            } else if (el.indexOf('.') > -1) {\r\n                settings.table = document.querySelector(el);\r\n            }\r\n        }\r\n\r\n        var iniFilter = function (el) {\r\n            if (el.indexOf('#') > -1) {\r\n                filterSettings.filterBox = document.getElementById(el.replace('#', '').trim());\r\n            } else if (el.indexOf('.') > -1) {\r\n                filterSettings.filterBox = document.querySelector(el);\r\n            }\r\n        }\r\n\r\n        var setTableEl = function (el) {\r\n            settings.el = el;\r\n        }\r\n\r\n        var setFilterOptions = function (filterOptions) {\r\n            if (filterOptions.el != null) {\r\n                setFilterEl(filterOptions.el);\r\n                iniFilter(filterSettings.el);\r\n                checkIsFilterBoxNull();\r\n                setFunctionInFilterBox();\r\n            }\r\n        }\r\n\r\n        var setFilterEl = function (el) {\r\n            filterSettings.el = el;\r\n        }\r\n\r\n        var setFunctionInFilterBox = function () {\r\n            filterSettings.filterBox.setAttribute('onkeyup', 'paginate.filter()')\r\n        }\r\n\r\n        var setGoBar = function (value) {\r\n            settings.goBar = value;\r\n        }\r\n\r\n        var setPageCounter = function (value) {\r\n            settings.pageCounter = value;\r\n        }\r\n\r\n        _lignePaginate.getEl = function () {\r\n            return settings.el;\r\n        }\r\n        _lignePaginate.getTable = function () {\r\n            return settings.table;\r\n        }\r\n        _lignePaginate.getNumberPerPage = function () {\r\n            return settings.numberPerPage;\r\n        }\r\n\r\n        _lignePaginate.getConstNumberPerPage = function () {\r\n            return settings.constNumberPerPage;\r\n        }\r\n\r\n        var table, tr = [], pageCount, numberPerPage, th;\r\n\r\n        var setOptions = function (options) {\r\n            if (options.numberPerPage != settings.numberPerPage) {\r\n                setNumberPerPage(options.numberPerPage);\r\n            }\r\n\r\n            if (typeof options.goBar === 'boolean')\r\n                setGoBar(options.goBar);\r\n\r\n            if (typeof options.pageCounter === 'boolean')\r\n                setPageCounter(options.pageCounter);\r\n        }\r\n\r\n        var checkIsTableNull = function () {\r\n            if (settings.table == null) {\r\n                throw new Error('Element ' + _lignePaginate.getEl() + ' no exits');\r\n            }\r\n        }\r\n\r\n        var checkIsFilterBoxNull = function () {\r\n            if (filterSettings.filterBox == null) {\r\n                throw new Error('Element ' + _lignePaginate.getEl() + ' no exits');\r\n            }\r\n        }\r\n\r\n        var paginateAlreadyExists = function () {\r\n            let paginate = document.querySelector('div.paginate');\r\n            if (paginate != null)\r\n                removePaginate(paginate);\r\n        }\r\n\r\n        var removePaginate = function (element) {\r\n            element.parentNode.removeChild(element);\r\n        }\r\n\r\n        var hiddenPaginateControls = function () {\r\n            document.querySelector('.paginate_controls').style.visibility = 'hidden';\r\n        }\r\n\r\n        var showPaginatecontrols = function () {\r\n            document.querySelector('.paginate_controls').style.visibility = 'unset';\r\n        }\r\n\r\n        var pageButtons = function (numberOfPage, currentPage) {\r\n            let prevDisabled = (currentPage == 1) ? \"disabled\" : \"\";\r\n            let nextDisabled = (currentPage == numberOfPage) ? \"disabled\" : \"\";\r\n            let buttons = \"<input type='button' value='←' class='paginate_control_prev' onclick='paginate.sort(\" + (currentPage - 1) + \")' \" + prevDisabled + \">\";\r\n            let buttonNumberOfPage = \"<input type='button' value='\" + currentPage + ' - ' + numberOfPage + \"' disabled>\";\r\n\r\n            for (let $i = 1; $i <= numberOfPage; $i++) {\r\n                if (numberOfPage > 10) {\r\n                    buttons += paginationMoreThatTenPage($i, numberOfPage);\r\n                } else {\r\n                    buttons += \"<input type='button' id='id\" + $i + \"'value='\" + $i + \"' onclick='paginate.sort(\" + $i + \")'>\";\r\n                }\r\n            }\r\n\r\n            let nextButton = \"<input type='button' value='→' class='paginate_control_next' onclick='paginate.sort(\" + (currentPage + 1) + \")' \" + nextDisabled + \">\";\r\n            buttons += nextButton;\r\n            return buttons;\r\n        }\r\n        var paginationMoreThatTenPage = function (iterator, numberOfPage) {\r\n\r\n            let referenceForTheLast = numberOfPage - 1;\r\n            let middleValue = '...';\r\n\r\n            if (iterator > referenceForTheLast || iterator < 5) {\r\n                return \"<input type='button' id='id\" + iterator + \"'value='\" + iterator + \"' onclick='paginate.sort(\" + iterator + \")'>\";\r\n            } else if ((iterator + 1) == numberOfPage) {\r\n                return middleValue + \"<input type='button' id='id\" + iterator + \"'value='\" + iterator + \"' style='display: none' onclick='paginate.sort(\" + iterator + \")'>\";\r\n            } else {\r\n                return \"<input type='button' id='id\" + iterator + \"'value='\" + iterator + \"' style='display: none' onclick='paginate.sort(\" + iterator + \")'>\";\r\n            }\r\n        }\r\n\r\n        var addGoToPage = function () {\r\n            let inputBox = \"<input type='number' id='paginate_page_to_go' value='1' min='1' max='\" + settings.numberOfPages + \"'>\";\r\n            let goButton = \"<input type='button' id='paginate-go-button' value='Go' onclick='paginate.goToPage()'>  \";\r\n            return inputBox + goButton;\r\n        }\r\n\r\n        _lignePaginate.goToPage = function () {\r\n            let page = document.getElementById(\"paginate_page_to_go\").value;\r\n            _lignePaginate.sort(page);\r\n        }\r\n\r\n        var launchPaginate = function () {\r\n            paginateAlreadyExists();\r\n            table = settings.table;\r\n            numberPerPage = settings.numberPerPage;\r\n            let rowCount = table.rows.length;\r\n            let firstRow = table.rows[0].firstElementChild.tagName;\r\n            let hasHead = (firstRow === \"TH\");\r\n            let $i, $ii, $j = (hasHead) ? 1 : 0;\r\n            th = (hasHead ? table.rows[(0)].outerHTML : \"\");\r\n            pageCount = Math.ceil(rowCount / numberPerPage);\r\n            settings.numberOfPages = pageCount;\r\n\r\n            if (pageCount > 1) {\r\n                settings.hasPagination = true;\r\n                for ($i = $j, $ii = 0; $i < rowCount; $i++, $ii++)\r\n                    tr[$ii] = table.rows[$i].outerHTML;\r\n                table.insertAdjacentHTML(\"afterend\", \"<div id='buttons' class='paginate paginate_controls'></div\");\r\n                _lignePaginate.sort(1);\r\n            } else {\r\n                settings.hasPagination = false;\r\n            }\r\n        };\r\n\r\n        _lignePaginate.sort = function (selectedPageNumber) {\r\n            let rows = th, startPoint = ((settings.numberPerPage * selectedPageNumber) - settings.numberPerPage);\r\n            for (let $i = startPoint; $i < (startPoint + settings.numberPerPage) && $i < tr.length; $i++)\r\n                rows += tr[$i];\r\n\r\n            table.innerHTML = rows;\r\n            document.getElementById(\"buttons\").innerHTML = pageButtons(pageCount, selectedPageNumber);\r\n            document.getElementById(\"id\" + selectedPageNumber).classList.add('active');\r\n            document.getElementById(\"id\" + selectedPageNumber).style.display = 'unset';\r\n        }\r\n\r\n        _lignePaginate.filter = function () {\r\n            if (settings.hasPagination) {\r\n                setNumberPerPage(9999);\r\n                _lignePaginate.sort(1);\r\n                hiddenPaginateControls();\r\n            }\r\n            const filter = document.querySelector(filterSettings.el).value.toUpperCase();\r\n            const trs = document.querySelectorAll(settings.el + ' tr:not(.header)');\r\n            trs.forEach(tr => tr.style.display = [...tr.children].find(td => td.innerHTML.toUpperCase().includes(filter)) ? '' : 'none');\r\n\r\n            if (filter.length == 0 && settings.hasPagination) {\r\n                setNumberPerPage(_lignePaginate.getConstNumberPerPage());\r\n                _lignePaginate.sort(1);\r\n                showPaginatecontrols();\r\n            }\r\n\r\n        }\r\n\r\n        return _lignePaginate;\r\n    }\r\n\r\n    if (typeof (window.paginate) === 'undefined') {\r\n        window.paginate = lignePaginate();\r\n    }\r\n})(window);"]}